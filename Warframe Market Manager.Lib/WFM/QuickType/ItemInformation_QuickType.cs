// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Warframe_Market_Manager.Lib.WFM.QuickType;
//
//    var itemInformation = ItemInformation.FromJson(jsonString);

namespace Warframe_Market_Manager.Lib.WFM.QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class ItemInformation_QuickType
    {
        /*[JsonProperty("payload", NullValueHandling = NullValueHandling.Ignore)]
        public Payload Payload { get; set; }*/

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("items_in_set", NullValueHandling = NullValueHandling.Ignore)]
        public List<ItemOverview> ItemsInSet { get; set; }


        public static ItemInformation_QuickType FromJson(string json)
        {
            return JsonConvert.DeserializeObject<ItemInformation_QuickType>(json, Warframe_Market_Manager.Lib.WFM.QuickType.ItemInformation_QuickType.Settings);
        }

        internal static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    public static class ItemInformation_QuickTypeExt
    {
        public static string ToJson(this ItemInformation_QuickType self)
        {
            return JsonConvert.SerializeObject(self, Warframe_Market_Manager.Lib.WFM.QuickType.ItemInformation_QuickType.Settings);
        }
    }

    /*public partial class Payload
    {
        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public Item Item { get; set; }
    }*/

    /*public class ItemInfo_Item
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("items_in_set", NullValueHandling = NullValueHandling.Ignore)]
        public List<ItemsInSet> ItemsInSet { get; set; }
    }*/

    /*public class ItemsInSet
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("trading_tax", NullValueHandling = NullValueHandling.Ignore)]
        public long? TradingTax { get; set; }

        [JsonProperty("en", NullValueHandling = NullValueHandling.Ignore)]
        public ItemInformation_Info EnglishInfo { get; set; }

        [JsonProperty("set_root", NullValueHandling = NullValueHandling.Ignore)]
        public bool? SetRoot { get; set; }

        [JsonProperty("mastery_level", NullValueHandling = NullValueHandling.Ignore)]
        public long? MasteryLevel { get; set; }

        [JsonProperty("sub_icon", NullValueHandling = NullValueHandling.Ignore)]
        public string SubIcon { get; set; }

        [JsonProperty("tags", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Tags { get; set; }

        [JsonProperty("url_name", NullValueHandling = NullValueHandling.Ignore)]
        public string UrlName { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("icon_format", NullValueHandling = NullValueHandling.Ignore)]
        public string IconFormat { get; set; }

        [JsonProperty("thumb", NullValueHandling = NullValueHandling.Ignore)]
        public string Thumb { get; set; }

        [JsonProperty("ducats", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ducats { get; set; }


        *//*[JsonProperty("zh-hans", NullValueHandling = NullValueHandling.Ignore)]
        public De ZhHans { get; set; }

        [JsonProperty("fr", NullValueHandling = NullValueHandling.Ignore)]
        public De Fr { get; set; }

        [JsonProperty("ko", NullValueHandling = NullValueHandling.Ignore)]
        public De Ko { get; set; }

        [JsonProperty("de", NullValueHandling = NullValueHandling.Ignore)]
        public De De { get; set; }

        [JsonProperty("es", NullValueHandling = NullValueHandling.Ignore)]
        public De Es { get; set; }

        [JsonProperty("pl", NullValueHandling = NullValueHandling.Ignore)]
        public De Pl { get; set; }

        [JsonProperty("pt", NullValueHandling = NullValueHandling.Ignore)]
        public De Pt { get; set; }

        [JsonProperty("ru", NullValueHandling = NullValueHandling.Ignore)]
        public De Ru { get; set; }

        [JsonProperty("zh-hant", NullValueHandling = NullValueHandling.Ignore)]
        public De ZhHant { get; set; }

        [JsonProperty("sv", NullValueHandling = NullValueHandling.Ignore)]
        public De Sv { get; set; }*//*
    }*/

    /*public partial class ItemInfo
    {
        [JsonProperty("item_name", NullValueHandling = NullValueHandling.Ignore)]
        public string ItemName { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("wiki_link", NullValueHandling = NullValueHandling.Ignore)]
        public Uri WikiLink { get; set; }

        [JsonProperty("drop", NullValueHandling = NullValueHandling.Ignore)]
        public List<DropRelic> RelicsThatDropItem { get; set; }
    }*/

    /*public partial class ItemInformation
    {
        public static ItemInformation FromJson(string json) => JsonConvert.DeserializeObject<ItemInformation>(json, Warframe_Market_Manager.Lib.WFM.QuickType.Converter.Settings);
    }*/

    /*public static class Serialize
    {
        public static string ToJson(this ItemInformation self) => JsonConvert.SerializeObject(self, Warframe_Market_Manager.Lib.WFM.QuickType.Converter.Settings);
    }*/

    /*internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }*/
}
